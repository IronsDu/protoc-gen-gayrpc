package generator

const CppTemplate = `// Generated by github.com/IronsDu/protoc-gen-gayrpc
// Coding by github.com/liuhan907
// DO NOT EDIT!!!

#ifndef {{$.MacroName}}
#define {{$.MacroName}}

#include <string>
#include <unordered_map>
#include <memory>
#include <cstdint>
#include <future>

#include <google/protobuf/util/json_util.h>

#include "meta.pb.h"
#include "{{$.ModelFileName}}"

#include "GayRpcCore.h"
#include "GayRpcError.h"
#include "GayRpcTypeHandler.h"
#include "GayRpcClient.h"
#include "GayRpcService.h"
#include "GayRpcReply.h"

{{range $i, $packageName := $.PackageNames}}namespace {{$packageName}} {
{{end}}
namespace {{$.Namespace}}
{
    using namespace gayrpc::core;
    using namespace google::protobuf::util;
    
    {{range $i, $service := $.Services}}
    enum class {{$service.MethodsEnumName}}:uint64_t
    {
        {{range $i, $method := $service.Methods}}{{$method.EnumName}} = {{$method.MethodID}},
        {{end}}
    };

    class {{$service.Name}}Client : public BaseClient
    {
    public:
        typedef std::shared_ptr<{{$service.Name}}Client> PTR;

        {{range $i, $method := $service.Methods}}typedef std::function<void(const {{$.ContainerNamespace}}{{$method.OutputType}}&,
            const gayrpc::core::RpcError&)> {{$method.Name}}Handle;
        {{end}}

    public:
        {{range $i, $method := $service.Methods}}void {{$method.MethodName}}(const {{$.ContainerNamespace}}{{$method.InputType}}& request,
            const {{$method.Name}}Handle& handle = nullptr)
        {
            call<{{$.ContainerNamespace}}{{$method.OutputType}}>(request, static_cast<uint64_t>({{$service.MethodsEnumName}}::{{$method.EnumName}}), handle);
        }
        {{end}}

        {{range $i, $method := $service.Methods}} {{$.ContainerNamespace}}{{$method.OutputType}} sync_{{$method.MethodName}}(const {{$.ContainerNamespace}}{{$method.InputType}}& request,
            gayrpc::core::RpcError& error)
        {
                auto errorPromise = std::make_shared<std::promise<gayrpc::core::RpcError>>();
                auto responsePromise = std::make_shared<std::promise<{{$.ContainerNamespace}}{{$method.OutputType}}>>();

                {{$method.MethodName}}(request, [responsePromise, errorPromise](const {{$.ContainerNamespace}}{{$method.OutputType}}& response,
                    const gayrpc::core::RpcError& error) {
                    errorPromise->set_value(error);
                    responsePromise->set_value(response);
                });

                error = errorPromise->get_future().get();
                return responsePromise->get_future().get();
        }
        {{end}}

    public:
        static PTR Create(const RpcTypeHandleManager::PTR& rpcHandlerManager,
            const UnaryServerInterceptor& outboundInterceptor,
            const UnaryServerInterceptor& inboundInterceptor)
        {
            struct make_shared_enabler : public {{$service.Name}}Client
            {
            public:
                make_shared_enabler(const UnaryServerInterceptor& outboundInterceptor,
                    const UnaryServerInterceptor& inboundInterceptor)
                    : 
                    {{$service.Name}}Client(outboundInterceptor, inboundInterceptor) {}
            };

            auto client = PTR(new make_shared_enabler(outboundInterceptor, inboundInterceptor));
            client->installResponseStub(rpcHandlerManager);

            return client;
        }

    private:
        using BaseClient::BaseClient;
    };

    {{range $i, $method := $service.Methods}}typedef TemplateReply<{{$.ContainerNamespace}}{{$method.OutputType}}> {{$method.Name}}Reply;
    {{end}}

    class {{$service.Name}}Service : public BaseService
    {
    public:
        typedef std::shared_ptr<{{$service.Name}}Service> PTR;
        virtual ~{{$service.Name}}Service()
        {
        }

        virtual void onClose() {}

    private:
        {{range $i, $method := $service.Methods}}virtual bool {{$method.MethodName}}(const {{$.ContainerNamespace}}{{$method.InputType}}& request, 
            const {{$method.Name}}Reply::PTR& replyObj) = 0;
        {{end}}

    private:
        friend  void register{{$service.Name}}Service(gayrpc::core::RpcTypeHandleManager::PTR rpcTypeHandleManager,
            const {{$service.Name}}Service::PTR& service,
            const UnaryServerInterceptor& inboundInterceptor,
            const UnaryServerInterceptor& outboundInterceptor);

        {{range $i, $method := $service.Methods}}static bool {{$method.MethodName}}_stub(const RpcMeta& meta,
            const std::string& data,
            const {{$service.Name}}Service::PTR& service,
            const UnaryServerInterceptor& inboundInterceptor,
            const UnaryServerInterceptor& outboundInterceptor)
        {
            {{$.ContainerNamespace}}{{$method.InputType}} request;
            
            switch (meta.encoding())
            {
            case RpcMeta::BINARY:
                if (!request.ParseFromString(data))
                {
                    std::cerr << "parse binary {{$method.Name}}Requst error " << std::endl;
                    return false;
                }
                break;
            case RpcMeta::JSON:
                {
                    auto s = JsonStringToMessage(data, &request);
                    if (!s.ok())
                    {
                        throw std::runtime_error("parse json {{$method.Name}}Requst failed:" +
                            s.error_message().as_string());
                    }
                }
                break;
            default:
                std::cerr << "parse {{$method.Name}}Requst of unspported encoding type:" << meta.encoding() << std::endl;
                return false;
            }

            inboundInterceptor(meta,
                request,
                [service,
                outboundInterceptor,
                &request](const RpcMeta& meta, const google::protobuf::Message& message) {
                auto replyObject = std::make_shared<{{$method.Name}}Reply>(meta, outboundInterceptor);
                service->{{$method.MethodName}}(request, replyObject);
            });
            return true;
        }
        {{end}}
    };

    inline void register{{$service.Name}}Service(gayrpc::core::RpcTypeHandleManager::PTR rpcTypeHandleManager,
        const {{$service.Name}}Service::PTR& service,
        const UnaryServerInterceptor& inboundInterceptor,
        const UnaryServerInterceptor& outboundInterceptor)
    {
        typedef std::function<bool(const RpcMeta&,
            const std::string& data,
            const {{$service.Name}}Service::PTR&,
            const UnaryServerInterceptor&,
            const UnaryServerInterceptor&)> {{$service.Name}}ServiceRequestHandler;

        typedef std::unordered_map<uint64_t, {{$service.Name}}ServiceRequestHandler> {{$service.Name}}ServiceHandlerMapById;
        typedef std::unordered_map<std::string, {{$service.Name}}ServiceRequestHandler> {{$service.Name}}ServiceHandlerMapByStr;

        // TODO::这里不应该每一次注册都构造一个单独的map,应该此服务的所有服务对象共享这两个map
        auto serviceHandlerMapById = std::make_shared<{{$service.Name}}ServiceHandlerMapById>();
        auto serviceHandlerMapByStr = std::make_shared<{{$service.Name}}ServiceHandlerMapByStr>();

        std::string namespaceStr = "{{range $i, $packageName := $.PackageNames}}{{$packageName}}.{{end}}";

        // TODO::避免method.MethodName默认为小写开头，而是需要和proto里定义的函数名称完全一致
        {{range $i, $method := $service.Methods}}(*serviceHandlerMapById)[static_cast<uint64_t>({{$service.MethodsEnumName}}::{{$method.MethodName}})] = {{$service.Name}}Service::{{$method.MethodName}}_stub;
        {{end}}
        {{range $i, $method := $service.Methods}}(*serviceHandlerMapByStr)[namespaceStr+"{{$service.Name}}.{{$method.MethodName}}"] = {{$service.Name}}Service::{{$method.MethodName}}_stub;
        {{end}}

        auto requestStub = [service,
            serviceHandlerMapById,
            serviceHandlerMapByStr,
            inboundInterceptor,
            outboundInterceptor](const RpcMeta& meta, const std::string& data) {
            
            if (meta.type() != RpcMeta::REQUEST)
            {
                return false;
            }
            
            {{$service.Name}}ServiceRequestHandler handler;

            if (!meta.request_info().strmethod().empty())
            {
                auto it = serviceHandlerMapByStr->find(meta.request_info().strmethod());
                if (it == serviceHandlerMapByStr->end())
                {
                    std::cerr << "not found handle, method:" << meta.request_info().strmethod();
                    return false;
                }
                handler = (*it).second;
            }
            else
            {
                auto it = serviceHandlerMapById->find(meta.request_info().intmethod());
                if (it == serviceHandlerMapById->end())
                {
                    std::cerr << "not found handle, method:" << meta.request_info().intmethod();
                    return false;
                }
                handler = (*it).second;
            }

            return handler(meta,
                data,
                service,
                inboundInterceptor,
                outboundInterceptor);
        };
        rpcTypeHandleManager->registerTypeHandle(RpcMeta::REQUEST, requestStub);
    }
    {{end}}
}

{{range $i, $packageName := $.PackageNames}}}
{{end}}
#endif

`
